import sqlite3
from datetime import date

import admin_handlers
import user_keyboards
from config import *
from aiogram import Bot, Dispatcher
import user_callback

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

con = sqlite3.connect("User.db")
cur = con.cursor()

async def db_start():
    cur.execute("CREATE TABLE IF NOT EXISTS user_table("
                "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                "user_id INTEGER, "
                "user_name TEXT)")
    con.commit()
    cur.execute("CREATE TABLE IF NOT EXISTS info_table("
                "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                "uan_course REAL DEFAULT 1, "
                "info TEXT)")
    cur.execute("CREATE TABLE IF NOT EXISTS order_table("
                "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                "name TEXT, "
                "user_name TEXT, "
                "date TEXT)")
    con.commit()

async def order_check(user_name, user_id):
    us_name = cur.execute("SELECT * FROM order_table WHERE user_name = ?", (user_name,)).fetchone()
    if not us_name:
        await bot.send_message(user_id,"üë∂<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–∞–∫ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):</b>\n\n"
                                        "*–Ω–∞ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –í–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞", parse_mode='HTML')
        await user_callback.UserState.order_name.set()
    else:
        await bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É\n"
                                        "–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç")

async def order_request(name, user_name):
    order = cur.execute("SELECT * FROM order_table WHERE user_name = ?", (user_name,)).fetchone()
    if not order:
        today = date.today()
        cur.execute("INSERT INTO order_table (name, user_name, date) VALUES (?, ?, ?)", (name, user_name, today))
        con.commit()

async def cmd_start_db(user_id, user_name):
    user1 = cur.execute("SELECT * FROM user_table WHERE user_id == {key}".format(key=user_id)).fetchone()
    if not user1:
        cur.execute("INSERT INTO user_table (user_id, user_name) VALUES (?, ?)", (user_id, f"@{user_name}"))
        con.commit()

async def user_id(message):
    cur.execute("SELECT user_id FROM user_table")
    us_id = cur.fetchall()
    for z in range(len(us_id)):
        await bot.send_message(us_id[z][0], message.text)

async def create_uan(price):
    cur.execute("SELECT uan_course FROM info_table")
    uan = cur.fetchall()
    if not uan:
        cur.execute("INSERT INTO info_table (uan_course) VALUES (?)", (price, ))
        con.commit()
    cur.execute("UPDATE info_table SET uan_course=?", (price, ))
    con.commit()

async def uan_calculator(product, user_id):
    cur.execute("SELECT uan_course FROM info_table WHERE id=1")
    uan = cur.fetchall()[0][0]

    price = int(round(product * uan, 1))
    price1 = int(round(price * 1.22, 1))

    await bot.send_message(user_id, f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç <b>{price1}</b> —Ä—É–±–ª–µ–π\n\n"
                                    f"<b>–£–∂–µ –≤–∫–ª—é—á–µ–Ω–æ:\n"
                                    "üöò–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –†–æ—Å—Å–∏–∏;\n"
                                    "üí∏–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ 100% (–µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –±—ã–ª —É–∫—Ä–∞–¥–µ–Ω –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω –í–∞–º –≤–µ—Ä–Ω—É—Ç 100% —É–ø–ª–∞—á–µ–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤).</b>\n\n"
                                    "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –†–æ—Å—Å–∏–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ–∞–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.\n\n"
                                    "<b>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏?</b> –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.", parse_mode='HTML', reply_markup=user_keyboards.price_calculator_kb)

async def uan_look(user_id):
    cur.execute("SELECT uan_course FROM info_table WHERE id=1")
    uan = cur.fetchall()[0][0]
    await bot.send_message(user_id, f"–ö—É—Ä—Å —é–∞–Ω—è –∑–∞–¥–∞–Ω—ã–π –≤ –±–æ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã –º–æ–º–µ–Ω—Ç —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç <b>{uan}</b>", parse_mode='HTML')

async def checking_order(user_id):
    cur.execute("SELECT * FROM order_table")

    orders = cur.fetchall()
    info = ''
    for el in orders:
        info += f"\n\n–§–ò–û: {el[1]}\n\nUser_name: @{el[2]}\n\n–î–∞—Ç–∞: {el[3]}"

    await bot.send_message(user_id, f"<b>–í–æ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏</b> {info}", parse_mode="HTML")

async def delete_order(user_name, user_id):
    sql_delete = "DELETE from order_table WHERE user_name = ?"
    cur.execute(sql_delete, (user_name,))
    con.commit()
    await bot.send_message(user_id, "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    await admin_handlers.UserState.admin_panel.set()

async def on_startup(_):
    await db_start()

